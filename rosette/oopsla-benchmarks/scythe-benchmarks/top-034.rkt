#lang rosette 
 
(require "../cosette.rkt" "../util.rkt" "../denotation.rkt" "../cosette.rkt" "../sql.rkt" "../evaluator.rkt" "../syntax.rkt" "../symmetry.rkt" "../test-util.rkt") 
  
(provide ros-instance)  

(current-bitwidth #f)

(define t0 (table-info "input" (list "Train" "Dest" "Time")))
 
(define (q5 tables) 
(SELECT (VALS "t3.Train" "t3.Dest1" "t3.Time1" )
 FROM (AS (SELECT (VALS "t2.Train" "t2.Train1" "t2.Dest1" "t2.Time1" (VAL-UNOP aggr-max (val-column-ref "t2.Time")) )
 FROM (AS (SELECT (VALS "t5.Train" "t5.Dest" "t5.Time" "t5.Train1" "t5.Dest1" "t5.Time1" )
 FROM (AS (JOIN (NAMED (list-ref tables 0)) (AS (NAMED (list-ref tables 0)) ["t4" (list "Train" "Dest" "Time")])) ["t5" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (AND (BINOP "t5.Train" >= "t5.Train1") (TRUE))) ["t2" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (TRUE)
 GROUP-BY (list "t2.Train" "t2.Train1" "t2.Dest1" "t2.Time1" )
 HAVING (TRUE)) ["t3" (list "Train" "Train1" "Dest1" "Time1" "max_Time")])
 WHERE (AND (BINOP "t3.max_Time" = "t3.Time1") (TRUE))))
 
(define (q4 tables) 
(SELECT (VALS "t5.Train" "t5.Dest" "t5.Time" )
 FROM (AS (SELECT (VALS "t3.Train" "t3.Dest" "t3.Time" (VAL-UNOP aggr-max (val-column-ref "t3.Time1")) )
 FROM (AS (SELECT (VALS "t2.Train" "t2.Dest" "t2.Time" "t2.Train1" "t2.Dest1" "t2.Time1" )
 FROM (AS (JOIN (NAMED (list-ref tables 0)) (AS (NAMED (list-ref tables 0)) ["t4" (list "Train" "Dest" "Time")])) ["t2" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (AND (TRUE) (BINOP "t2.Train" <= "t2.Train1"))) ["t3" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (TRUE)
 GROUP-BY (list "t3.Train" "t3.Dest" "t3.Time" )
 HAVING (TRUE)) ["t5" (list "Train" "Dest" "Time" "max_Time1")])
 WHERE (AND (BINOP "t5.max_Time1" = "t5.Time") (TRUE))))
 
(define (q3 tables) 
(SELECT (VALS "t4.Train" "t4.Dest1" "t4.Time1" )
 FROM (AS (SELECT (VALS "t3.Train" "t3.Dest1" "t3.Time1" (VAL-UNOP aggr-max (val-column-ref "t3.Time")) )
 FROM (AS (SELECT (VALS "t2.Train" "t2.Dest" "t2.Time" "t2.Train1" "t2.Dest1" "t2.Time1" )
 FROM (AS (JOIN (NAMED (list-ref tables 0)) (AS (NAMED (list-ref tables 0)) ["t5" (list "Train" "Dest" "Time")])) ["t2" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (AND (TRUE) (BINOP "t2.Train" <= "t2.Train1"))) ["t3" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (TRUE)
 GROUP-BY (list "t3.Train" "t3.Dest1" "t3.Time1" )
 HAVING (TRUE)) ["t4" (list "Train" "Dest1" "Time1" "max_Time")])
 WHERE (AND (BINOP "t4.max_Time" = "t4.Time1") (TRUE))))
 
(define (q2 tables) 
(SELECT (VALS "t2.Train1" "t2.Dest" "t2.Time" )
 FROM (AS (SELECT (VALS "t3.Dest" "t3.Time" "t3.Train1" (VAL-UNOP aggr-max (val-column-ref "t3.Time1")) )
 FROM (AS (SELECT (VALS "t4.Train" "t4.Dest" "t4.Time" "t4.Train1" "t4.Dest1" "t4.Time1" )
 FROM (AS (JOIN (NAMED (list-ref tables 0)) (AS (NAMED (list-ref tables 0)) ["t5" (list "Train" "Dest" "Time")])) ["t4" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (AND (BINOP "t4.Train" >= "t4.Train1") (TRUE))) ["t3" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (TRUE)
 GROUP-BY (list "t3.Dest" "t3.Time" "t3.Train1" )
 HAVING (TRUE)) ["t2" (list "Dest" "Time" "Train1" "max_Time1")])
 WHERE (AND (BINOP "t2.max_Time1" = "t2.Time") (TRUE))))
 
(define (q1 tables) 
(SELECT (VALS "t2.Train" "t2.Dest" "t2.Time" )
 FROM (AS (SELECT (VALS "t4.Train" "t4.Dest" "t4.Time" "t4.Train1" (VAL-UNOP aggr-max (val-column-ref "t4.Time1")) )
 FROM (AS (SELECT (VALS "t5.Train" "t5.Dest" "t5.Time" "t5.Train1" "t5.Dest1" "t5.Time1" )
 FROM (AS (JOIN (NAMED (list-ref tables 0)) (AS (NAMED (list-ref tables 0)) ["t3" (list "Train" "Dest" "Time")])) ["t5" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (AND (TRUE) (BINOP "t5.Train" <= "t5.Train1"))) ["t4" (list "Train" "Dest" "Time" "Train1" "Dest1" "Time1")])
 WHERE (TRUE)
 GROUP-BY (list "t4.Train" "t4.Dest" "t4.Time" "t4.Train1" )
 HAVING (TRUE)) ["t2" (list "Train" "Dest" "Time" "Train1" "max_Time1")])
 WHERE (AND (BINOP "t2.max_Time1" = "t2.Time") (TRUE))))

(define ros-instance (list q1 q2 (list t0)))
