#lang rosette

(require "../util.rkt" "../sql.rkt" "../table.rkt" 
         "../symmetry.rkt"  "../evaluator.rkt" "../equal.rkt"  rosette/lib/synthax)

; ------- actual tables (only for test) -------

(define c-t
  (Table "t" (list "tid" "name")
   (list
    (cons (list 1 1) 1)
    (cons (list 2 2) 1)
    (cons (list 3 3) 1)
    (cons (list 4 4) 1)
    (cons (list 5 5) 1))))

(define c-tr
  (Table "tr" (list "rid" "tid" "type")
         (list
          (cons (list 101 1 1) 1)
    (cons (list 102 2 2) 1)
    (cons (list 103 3 2) 1)
    (cons (list 104 4 "null-symbol") 1))))

(define c-ta
  (Table "ta" (list "rid" "status")
   (list (cons (list 101 1) 1))))
(define c-tb
  (Table "tb" (list "rid" "status")
   (list (cons (list 103 0) 1)
               (cons (list 102 1) 1))))

; ==== counter example generated by Cosette

(define c2-t
  (Table "t" (list "tid" "name")
         (list
          (cons (list 0 0) 15))))

(define c2-tr
  (Table "tr" (list "rid" "tid" "type")
         (list
          (cons (list 0 0 0) 0))))

(define c2-ta
  (Table "ta" (list "rid" "status")
   (list (cons (list 0 0) 4))))
(define c2-tb
  (Table "tb" (list "rid" "status")
   (list (cons (list 0 0) 3))))

; ------------ symbolic tables ----------------

(define s-t (Table "t" (list "tid" "name") (gen-sym-schema 2 1)))
(define s-tr (Table "tr" (list "rid" "tid" "type") (gen-sym-schema 3 1)))
(define s-ta (Table "ta" (list "rid" "status") (gen-sym-schema 2 1)))
(define s-tb (Table "tb" (list "rid" "status") (gen-sym-schema 2 1)))

(define (run-test t tr ta tb check)
  
  ; ===== correct query ==== 
  
  (define q1 
    (AS (LEFT-OUTER-JOIN (NAMED t) (NAMED tr) (BINOP "t.tid" = "tr.tid"))
        ["t1" (list "tid1" "name" "rid" "tid2" "type")]))

  (define q1-2
    (AS (LEFT-OUTER-JOIN
          (NAMED t) 
          (NAMED tr) 
          (BINOP "t.tid" = "tr.tid"))
        ["t1" (list "tid1" "name" "rid" "tid2" "type")]))

  (define q2
    (AS (LEFT-OUTER-JOIN
          q1 
          (NAMED ta)
          (AND (BINOP "t1.type" equal? 1) (BINOP "t1.rid" = "ta.rid")))
        ["t0" (list "tid1" "name" "rid" "tid2" "type" "rid2" "status1")]))

  (define q3
    (AS (LEFT-OUTER-JOIN
          q2
          (NAMED tb)
          (AND (BINOP "t0.type" equal? 2) (BINOP "t0.rid" = "tb.rid")))
        ["t0" (list "tid1" "name" "rid" "tid2" "type" "rid2" "status1" "rid3" "status2")]))

  (define q4
    (SELECT (VALS "t0.tid1" "t0.name" "t0.status1" "t0.status2") FROM q3 WHERE (TRUE)))

  ; === wrong query ===

  (define q1-r
   (AS (SELECT (VALS "t0.tid1" "t0.name" "t0.rid" "t0.tid2" "t0.type")
        FROM (AS (JOIN (NAMED t) (NAMED tr)) 
                 ["t0" (list "tid1" "name" "rid" "tid2" "type")])
        WHERE (BINOP "t0.tid1" = "t0.tid2"))
       ["t0" (list "tid1" "name" "rid" "tid2" "type")]))
       
  (define q2-r
    (AS (LEFT-OUTER-JOIN
          q1-r
          (NAMED ta)
          (AND (BINOP "t0.rid" (lambda (x y) (not (equal? x y))) sqlnull) 
               (AND (BINOP "t0.type" equal? 1) (BINOP "t0.rid" = "ta.rid"))))
      ["t0" (list "tid1" "name" "rid" "tid2" "type" "rid2" "status1")]))
      
  (define q3-r
    (AS (LEFT-OUTER-JOIN
          q2-r
          (NAMED tb)
          (AND (BINOP "t0.rid" (lambda (x y) (not (equal? x y))) sqlnull) 
               (AND (BINOP "t0.type" equal? 2) (BINOP "t0.rid" = "tb.rid"))))
        ["t0" (list "tid1" "name" "rid" "tid2" "type" "rid2" "status1" "rid3" "status2")]))

  (define q4-r
    (SELECT (VALS "t0.tid1" "t0.name" "t0.status1" "t0.status2") FROM q3-r WHERE (TRUE)))
  
  (if check (time (verify (same q4 q4-r))) (go-break-symmetry-bounded q4 q4-r))
)

(define mconstr (run-test s-t s-tr s-ta s-tb #f))

(define s2-t (Table "t" (list "tid" "name") (gen-sym-schema 2 1)))
(define s2-tr (Table "tr" (list "rid" "tid" "type") (gen-sym-schema 3 1)))
(define s2-ta (Table "ta" (list "rid" "status") (gen-sym-schema 2 1)))
(define s2-tb (Table "tb" (list "rid" "status") (gen-sym-schema 2 1)))

(assert-table-mconstr s2-t (list-ref mconstr 0))
(assert-table-mconstr s2-tr (list-ref mconstr 1))
(assert-table-mconstr s2-ta (list-ref mconstr 2))
(assert-table-mconstr s2-tb (list-ref mconstr 3))

;(run-test c-t c-tr c-ta c-tb #t)
;(run-test s-t s-tr s-ta s-tb #t)
(run-test s2-t s2-tr s2-ta s2-tb #t)



